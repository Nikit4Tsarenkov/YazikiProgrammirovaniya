; F = Y * 24 + X / 64;      x un char; y un int
.data 
x dw ?
y dw ?
rez dd ?   
stroka db 'F = Y * 24 + X / 64 $'
input_X db 10,13, 'Enter the X(un char): $'
input_Y db 10,13,'Enter the Y(un int): $' 
enter db 0dh,0ah,'$'
positive db 0dh,0ah,'and positive$'
even db 0dh,0ah,'the nubmer is even$'
struneven db 0dh,0ah,'the nubmer is odd$'
.code 
start: 
    mov ax,@data 
    mov ds,ax   
    mov ah,09h
    mov dx,offset stroka
    int 21h  
    
    mov ah, 09h        
    mov dx, offset input_X
    int 21h 
    ;Input X:           
    mov 	ah,01h
    int 	21h	
    cmp     al,45
   

    sub 	al,48 	
    mov 	ah,0 	
    mov 	bx,10
    mov 	cx,ax

InputX: 
mov 	ah,01h
int 	21h 	
cmp 	al,0dh 	
je 	EndX	
sub 	al,30h	
cbw		
xchg 	ax,cx	
mul 	bx	
add 	cx,ax	
jmp 	InputX	
EndX:
    mov 	x,cx    
    jmp    label1 


label1:

    ;Input the Y:
    mov ah, 09h        
    mov dx, offset input_Y
    int 21h 
    
    mov 	ah,01h
    int 	21h	
    cmp     al,45
    
    sub 	al,48 	
    mov 	ah,0 	
    mov 	bx,10
    mov 	cx,ax
    
    InputY: 
    mov 	ah,01h
    int 	21h 	
    cmp 	al,0dh 	
    je 	EndY	
    sub 	al,30h	
    cbw		
    xchg 	ax,cx	
    mul 	bx	
    add 	cx,ax	
    jmp 	InputY	
    EndY:

mov 	y,cx 
jmp label2

    
    label2:
     
            ; operations
            ; X / 64(2^6)
    mov ax, x
    sar ax, 6
    mov x, ax
    xor ax,ax 
    xor bx,bx
            ; Y * 24
    mov bx,y
    shl bx,3 
    add bx,y
    add bx,y
    add bx,y
    add bx,y
    shl bx,1
    mov y,bx 
            ;
    mov ax,x
    add ax,y
    mov rez, ax           
                     ;chetnost
    test ax, 1       ; esli poslednii bit = 1, to nechet; 0, to chet
    jnz Funeven      ; != , to vivod nechet
    jz Feven         ; =  , to vivod chet
        Feven: 
    push ax
    mov ah, 09h
    mov dx, offset even
    int 21h 
    pop ax
    jmp TheEnd
    Funeven:
push ax
mov ah, 09h
mov dx, offset struneven
int 21h
pop ax               
jmp TheEnd
TheEnd:  
        ; +
test ax,ax         ; elsi posledni bit
jns NoSign         ; = >0
NoSign:	
mov rez,ax         ; vivod positive rez
push ax
mov ah, 09h
mov dx, offset positive
int 21h

mov ah, 09h        
mov dx, offset enter
int 21h   

pop ax
cwd     ;  ax->dx:ax
mov bx, 10	
push -1	
        ; Output
digitIn1:	
div bx	
add dx, 30h	
push dx	
mov dx,0	
cmp ax, 0	
jne digitIn1	     ;  zf = 0 -> next
       
digitOut1:
mov ah, 02h
pop dx
cmp dx, -1
je exit1   
int 21h
jmp digitOut1

exit1:
 
mov ax, 4c00h
int 21h                     
end start
